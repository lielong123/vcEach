name: Dev Snapshot Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

env:
  BUILD_TYPE: Release
  PICO_SDK_PATH: ${{github.workspace}}/.pico-sdk

jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup Build Environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          
      - name: Cache Pico SDK
        id: cache-pico-sdk
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/.pico-sdk
          key: ${{ runner.os }}-pico-sdk-v2.1.1-${{ hashFiles('pico_sdk_import.cmake') }}
          
      - name: Clone Pico SDK
        if: steps.cache-pico-sdk.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: raspberrypi/pico-sdk
          ref: 2.1.1
          path: .pico-sdk

      - name: Create SDK cache
        uses: actions/cache@v3
        with:
          path: |
            ${{github.workspace}}/.pico-sdk
          key: ${{ runner.os }}-pico-toolchain-sdk-${{ hashFiles('pico_sdk_import.cmake') }}

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board: [
          { name: "pico", platform: "rp2040", board_type: "pico" },
          { name: "pico_w", platform: "rp2040", board_type: "pico_w" },
          { name: "pico2", platform: "rp2350-arm-s", board_type: "pico2" },
          { name: "pico2_w", platform: "rp2350-arm-s", board_type: "pico2_w" }
        ]
      fail-fast: false

    name: Build for ${{ matrix.board.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Arm GNU Toolchain
        id: arm-none-eabi-gcc-action
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: '14.2.Rel1'

      - name: Restore SDK
        uses: actions/cache@v3
        with:
          path: |
            ${{github.workspace}}/.pico-sdk
          key: ${{ runner.os }}-pico-toolchain-sdk-${{ hashFiles('pico_sdk_import.cmake') }}
      
      - name: Cache build directory
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/build-${{ matrix.board.name }}
          key: ${{ runner.os }}-build-${{ matrix.board.name }}-${{ hashFiles('**/*.cpp', '**/*.h', '**/*.c', 'CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.board.name }}-
      
      - name: Install Node.js and pnpm (for web build)
        if: contains(matrix.board.name, '_w')
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Enable corepack and prepare pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Configure CMake
        run: |
            cmake -B ${{github.workspace}}/build-${{ matrix.board.name }} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        env:
          PICO_PLATFORM: ${{ matrix.board.platform }}
          PICO_BOARD: ${{ matrix.board.board_type }}

      - name: Build
        run: |
            cmake --build ${{github.workspace}}/build-${{ matrix.board.name }} --config ${{env.BUILD_TYPE}} -j$(nproc)
        env:
          WEB_ASSET_OUT_DIR: ${{github.workspace}}/build-${{ matrix.board.name }}/fs_files/web

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PiCCANTE-${{ matrix.board.name }}-Snapshot
          path: |
            ${{github.workspace}}/build-${{ matrix.board.name }}/PiCCANTE.uf2
            ${{github.workspace}}/build-${{ matrix.board.name }}/PiCCANTE.elf

  create-pre-release:
    name: Create Pre-Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Organize and rename artifacts
        run: |
            mkdir -p release_files
            # Loop through each board's artifact folder
            for dir in artifacts/*; do
            if [ -d "$dir" ]; then
                board_name=$(basename "$dir" | sed 's/PiCCANTE-\(.*\)-Snapshot/\1/')
                echo "Processing board: $board_name"
                
                for file in "$dir"/*; do
                if [ -f "$file" ]; then
                    filename=$(basename "$file")
                    extension="${filename##*.}"
                    basename="${filename%.*}"
                    new_filename="${basename}-${board_name}.${extension}"
                    cp "$file" "release_files/$new_filename"
                    echo "Renamed: $filename -> $new_filename"
                fi
                done
            fi
            done
            ls -la release_files/

      - name: Extract build info
        id: build_info
        run: |
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
          echo "time=$(date +'%H%M')" >> $GITHUB_OUTPUT
          echo "sha=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
          
          GIT_VERSION=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --always)
          if [[ ! $GIT_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          COMMIT_COUNT=$(git rev-list --count HEAD)
          GIT_VERSION="v0.0.0-${COMMIT_COUNT}-${GITHUB_SHA:0:7}"
          fi
          echo "version=$GIT_VERSION" >> $GITHUB_OUTPUT
          echo "Version from git: $GIT_VERSION"
      
      - name: Delete existing pre-release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          tag_name: dev-latest
          delete_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: dev-latest
          name: "Dev Build ${{ steps.build_info.outputs.version }} (${{ steps.build_info.outputs.date }})"
          body: |
            **Automated Development Build**
            
            Version: ${{ steps.build_info.outputs.version }}
            Date: ${{ steps.build_info.outputs.date }} ${{ steps.build_info.outputs.time }}
            Commit: [${{ steps.build_info.outputs.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            
            ⚠️ These are the latest development builds and may contain bugs or unfinished features.
          files: release_files/**/*
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}